# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5c7b01e2-8594-4c1d-afc1-2fc1aad4bd6e'
  imageRepository: 'manichukkapalliaimlmodels'
  containerRegistry: 'imagescr1.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/retail-sales-forecast/Dockerfile'
  tag: '$(Build.BuildId)'
  kubernetesServiceConnection: 'aks-sc'
  azureSubscription: 'CR-AZURE-DevSecOps'
  azureResourceGroup: 'Drone-Land-Survey-DevOps'
  aksClusterName: 'MyManagedCluster'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)  
    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.ArtifactStagingDirectory)'    
    - task: PublishBuildArtifacts@1    
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

- stage: 'Deployment'
  displayName: 'Deploy To AKS'
  jobs:
    - deployment: Release
      environment: 'myenv'
      displayName: 'Release'
      pool:
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - script: dir $(Build.SourcesDirectory)/ai-ml-models/retail-sales-forecast/manifests
              displayName: Cloning Manifest Files From Repo
              
            - task: KubernetesManifest@0
              displayName: Deploying Manifests InTo AKS
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'aks-sc'
                namespace: 'default'
                manifests: |
                  manifests/deployment.yaml
                  manifests/service.yaml
                imagePullSecrets: '$(imagePullSecret)'